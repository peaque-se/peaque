import { CodeFile } from "../codegen/index.js"
import { ComponentImport, PageComponentReference, SpecialPageReferences } from "../router/route-files.js"

export type FrontendRenderMode = "component" | "bootstrap"

export interface FrontendEntryOptions {
  headerComment: string
  routerSource: string
  componentImports: ComponentImport[]
  specialPages: SpecialPageReferences
  strictMode: boolean
  renderMode: FrontendRenderMode
  routerModule?: string
  rootElementId?: string
}

export function buildFrontendEntryModule({
  headerComment,
  routerSource,
  componentImports,
  specialPages,
  strictMode,
  renderMode,
  routerModule = "@peaque/framework",
  rootElementId = "peaque",
}: FrontendEntryOptions): string {
  const file = new CodeFile()

  file.addPreambleComment(`Auto-generated by ${headerComment}`)
  file.addPreambleComment("Do not edit this file directly")

  if (strictMode) {
    file.addNamedImport("react", "StrictMode")
  }

  if (renderMode === "bootstrap") {
    file.addNamedImport("react-dom/client", "createRoot")
  }

  file.addNamedImport(routerModule, "Router")

  const registerComponentImport = ({ identifier, importPath }: PageComponentReference) => {
    file.addDefaultImport(importPath, identifier)
  }

  for (const entry of componentImports) {
    registerComponentImport(entry)
  }

  const specialValues = Object.values(specialPages).filter(Boolean) as PageComponentReference[]
  for (const entry of specialValues) {
    registerComponentImport(entry)
  }

  const body = file.body
  body.raw(routerSource)
  body.blankLine()

  body.line("const conf = {")
  body.indented(builder => {
    builder.line("root: router,")

    const pushSpecial = (ref: PageComponentReference | undefined, prop: string) => {
      if (ref) {
        builder.line(`${prop}: <${ref.identifier} />,`)
      }
    }

    pushSpecial(specialPages.loading, "loading")
    pushSpecial(specialPages.missing, "missing")
    pushSpecial(specialPages.error, "error")
    pushSpecial(specialPages.accessDenied, "accessDenied")
  })
  body.line("}")

  body.blankLine()

  if (renderMode === "component") {
    body.line("export default function() {")
    body.indented(builder => {
      const component = "<Router {...conf} />"
      if (strictMode) {
        builder.line(`return <StrictMode>${component}</StrictMode>`)
      } else {
        builder.line(`return ${component}`)
      }
    })
    body.line("}")
  } else {
    const rendered = strictMode ? "<StrictMode><Router {...conf} /></StrictMode>" : "<Router {...conf} />"
    body.line(`createRoot(document.getElementById('${rootElementId}')!).render(${rendered})`)
  }

  return file.toString()
}
